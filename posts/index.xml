<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Lucas Mazza</title>
    <link>https://lucasmazza.website/posts/</link>
    <description>Recent content in Blog on Lucas Mazza</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Jun 2012 00:00:00 +0000</lastBuildDate><atom:link href="https://lucasmazza.website/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Field Guide</title>
      <link>https://lucasmazza.website/posts/2018-02-20-git-field-guide/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://lucasmazza.website/posts/2018-02-20-git-field-guide/</guid>
      <description>Git has become an indispensable tool of software development, regardless of which language or framework your team uses it. But in the other hand, it isn&amp;rsquo;t a tool that you can adopt, learn and be effective from day 1 - it takes time and guidance to master it, both in the command line the integrations and practices most teams have adopted.
I&amp;rsquo;ve put up together a guide on how I see and use git on my day to day work, that can be used as a starting both for both newcomers who are trying to grok or more experienced professionals who want to make a more effective use of it on they work.</description>
    </item>
    
    <item>
      <title>Experimenting with explicit contracts with Ruby</title>
      <link>https://lucasmazza.website/posts/2016-02-29-experimenting-with-explicit-contracts-with-ruby/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lucasmazza.website/posts/2016-02-29-experimenting-with-explicit-contracts-with-ruby/</guid>
      <description>A few months back, José Valim started a conversation on overusing mocks and coupling between components. That made me interested on revisiting how I design my code and it has changed my approach to testing a bit in one of our current Ruby projects.
A Tale of Two Adapters Back in November, I worked on integrating a payment gateway from scratch into one of our client projects, through a gem that abstracts the HTTP interface of this external service.</description>
    </item>
    
    <item>
      <title>Books from 2015</title>
      <link>https://lucasmazza.website/posts/2015-12-31-books-from-2015/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lucasmazza.website/posts/2015-12-31-books-from-2015/</guid>
      <description>2015 was the first year that I had a New Year&amp;rsquo;s Eve resolution to do: to read more books. I&amp;rsquo;m used to read a lot of blog posts and articles online but I wasn&amp;rsquo;t reading much outside of it (and most of what I was reading was strictly related to Rails and Front end anyway), so I set a goal of 12 books, technical or not, for 2015.
I&amp;rsquo;ve got it Close Enough™ - 10 books in 12 months, and half way through the eleventh one.</description>
    </item>
    
    <item>
      <title>Software is a multiverse</title>
      <link>https://lucasmazza.website/posts/2015-11-24-multiverse/</link>
      <pubDate>Tue, 24 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lucasmazza.website/posts/2015-11-24-multiverse/</guid>
      <description>Predicting the future is hard, yet programmers like to repeat that Framework X or Language Y is the future of programming, the savior of all large scale projects and complex refactorings, and everything else is outdated, unfashion and awful (I’ve seen this with most client side frameworks, a dozen of programming languages and a couple of times when someone decided to dig deep on functional programming). But as our small history on dealing with computers can show us, reality doesn’t work like that.</description>
    </item>
    
    <item>
      <title>Revising talks on code and craft</title>
      <link>https://lucasmazza.website/posts/2015-10-01-revising-talks/</link>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lucasmazza.website/posts/2015-10-01-revising-talks/</guid>
      <description>Over the last couple weeks I decided to get back to watching videos from conference talks, old and new, to deal with matters of the heart and help with some of the ongoing discussions in the current project I&amp;rsquo;m working on.
I&amp;rsquo;ve always been a fan of non technical presentations that talked about we can improve the ways we make software and deal with code rather than just dumping new technologies and going through README sections.</description>
    </item>
    
    <item>
      <title>Sane usage of Custom Elements</title>
      <link>https://lucasmazza.website/posts/2015-09-22-custom-elements/</link>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lucasmazza.website/posts/2015-09-22-custom-elements/</guid>
      <description>Web Components have been an controversial subject that surfaced in the Front end world over the last years that I&amp;rsquo;m still pretty skeptical about its usage on existing and greenfield projects due the lack of good examples on how they can be rolled out to production, but I believe there is a way to get started with them without buying in all the hype.
The whole Web Components spec holds four different standards, but the Custom Elements has some interesting features that can be useful to a lot of common tasks from regular projects.</description>
    </item>
    
    <item>
      <title>Nobody told me Minitest was this fun</title>
      <link>https://lucasmazza.website/posts/2015-05-11-nobody-told-me-minitest-was-this-fun/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lucasmazza.website/posts/2015-05-11-nobody-told-me-minitest-was-this-fun/</guid>
      <description>Ever since I started working with Ruby I have been using RSpec to test my apps and gems without giving minitest much thought. Recently I started a new non-Rails project and decided to give Minitest a try just for the fun of it. Migrating from one tool to another was refreshingly fun due to the fact that that Minitest and RSpec aren&amp;rsquo;t so different from each other - they both have the basic features that we need in a testing library to get things running, and if you are used to testing your code moving from one to the other might not be so scary as you might expect.</description>
    </item>
    
    <item>
      <title>CSS at Plataformatec</title>
      <link>https://lucasmazza.website/posts/2014-08-13-css-at-plataformatec/</link>
      <pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lucasmazza.website/posts/2014-08-13-css-at-plataformatec/</guid>
      <description>Last month some amazing developers gave a sneak peek on how they write CSS in their companies - Mark Otto has written about CSS at GitHub, followed by Ian Feather&amp;rsquo;s post about Lonely Planet&amp;rsquo;s CSS and Chris Coyier write up about CodePen&amp;rsquo;s code - so I thought about sharing a bit of how we have been doing CSS in our projects here at Plataformatec over the last years.
After working on different projects with different styles of CSS, we wrote some Guidelines of what kind of code we would like to work with.</description>
    </item>
    
    <item>
      <title>3 features from Rails 4.1 that I&#39;m excited about</title>
      <link>https://lucasmazza.website/posts/2014-04-08-3-features-from-rails-4-1-that-im-excited-about/</link>
      <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lucasmazza.website/posts/2014-04-08-3-features-from-rails-4-1-that-im-excited-about/</guid>
      <description>Rails 4.1 was just released this week and I already had a great experience trying out the release candidates on my latest project, so I decided to write a bit about my favorites features on this release and some things I have learned by using them so far.
1) secrets.yml Placing your configuration in a YAML file isn&amp;rsquo;t exactly a revolutionary feature, but the usage of the config/secrets.yml file that comes with Rails 4.</description>
    </item>
    
    <item>
      <title>Extending and customizing 3rd party code</title>
      <link>https://lucasmazza.website/posts/2013-02-25-extending-customizing-3rd-party-code/</link>
      <pubDate>Mon, 25 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://lucasmazza.website/posts/2013-02-25-extending-customizing-3rd-party-code/</guid>
      <description>We have a gem available for every kind of feature or scenario we might face in our applications and that may help us focus our development time on things that are more important to our applications. But, every now and then, these packaged solutions aren&amp;rsquo;t exactly what we need, and some sort of customization needs to be done on top of that - a different authentication strategy, new ways to query for data and several different things that our business rules might require.</description>
    </item>
    
    <item>
      <title>Flushing content blocks with Rails 4</title>
      <link>https://lucasmazza.website/posts/2012-06-27-flushing-content-blocks-with-rails-4/</link>
      <pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://lucasmazza.website/posts/2012-06-27-flushing-content-blocks-with-rails-4/</guid>
      <description>Besides the big and shiny features that Rails 4 holds, there&amp;rsquo;s a lot of small improvements on several other sections of the Rails framework - helpers, core extensions, app configurations and more - that might not even hit the Changelogs but will somehow make our lifes easier in the future. One of these hidden gems that I&amp;rsquo;ve found recently is an improvement on the content_for helper to flush and replace previous chunks of HTML with new ones.</description>
    </item>
    
  </channel>
</rss>
